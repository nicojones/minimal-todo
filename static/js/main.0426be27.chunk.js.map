{"version":3,"sources":["components/Modal/Modal.js","functions/createTaskObject.js","text.js","services/firebase.js","services/taskService.js","components/Modal/TaskModal.js","components/Project/Task/Subtask.js","components/Project/Task/Task.js","components/ProjectTitle/ProjectTitle.js","components/Project/Project.js","components/Project/Project-view.js","components/Loader/Loader.js","components/Projects/Projects.js","App.js","index.js"],"names":["Modal","children","modalOpen","okButton","cancelButton","onAccept","onCancel","className","onClick","dangerouslySetInnerHTML","__html","createTaskObject","task","name","checked","key","timestamp","Date","subtasks","description","text","loading","noListName","toISOString","slice","addPh","addSubtaskPh","addSubtaskBtn","allTasksCompleted","incomplete","Math","floor","random","length","completed","completedNo","showCompleted","hideCompleted","saveTask","discardTask","notes","notesPh","projects","addProject","addProjectPh","deleteProject","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","user","taskService","path","updateTask","a","console","log","ref","update","error","addTask","push","deleteTask","tasks","findIndex","_task","remove","getProject","projectKey","done","on","snapshot","projectName","child","val","project","forEach","e","getProjects","projectData","Object","values","completedTasks","filter","t","openTasks","saveListName","newProject","TaskModal","trigger","setModalOpen","useState","subtaskName","setSubtaskName","setSubtasks","taskName","setTaskName","taskDesc","setTaskDesc","keepOpen","then","reference","submit","preventDefault","useEffect","onSubmit","value","placeholder","onChange","target","map","sub","title","type","id","subtask","Subtask","extraClass","addSubtaskInput","setAddSubtaskInput","autoFocus","Task","onDelete","find","s","mainCheckDisabled","setMainCheckDisabled","expandedTask","setExpandedTask","disabled","toggleCompleted","ProjectTitle","setShowCompleted","editListName","listName","setListName","setEditListName","Project","open","allCompleted","useMemo","changed","index","required","autoComplete","projectRender","Loader","Projects","setProjectKey","setShowLoader","setProjects","showAddProject","setShowAddProject","newProjectName","setNewProjectName","window","confirm","_projects","proj","snap","minLength","onBlur","App","location","hash","substring","setProject","showLoader","ProjectContext","React","createContext","off","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0426be27.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Modal ({ children, modalOpen, okButton, cancelButton, onAccept, onCancel }) {\n\n  return (\n    <>\n      {\n        modalOpen ? <>\n          <div className={ 'z-depth-5 modal open' }>\n            <div className=\"modal-content\">\n              { children }\n            </div>\n            <div className=\"modal-footer\">\n              {\n                okButton &&\n                <button\n                  onClick={ onAccept }\n                  className=\"modal-close waves-effect waves-green btn-flat btn\"\n                  dangerouslySetInnerHTML={ { __html: okButton } }\n                />\n              }\n              {\n                cancelButton &&\n                <button\n                  onClick={ onCancel }\n                  className=\"modal-close waves-effect waves-red btn-flat btn left\"\n                  dangerouslySetInnerHTML={ { __html: cancelButton } }\n                />\n              }\n            </div>\n          </div>\n          <div className=\"backdrop\" onClick={ onCancel }/>\n        </>\n        : ''\n      }\n    </>\n  );\n}\n\nexport default Modal;\n","function createTaskObject (task) {\n  return {\n    name: task.name || '',\n    checked: task.checked || false,\n    key: task.key || null, // set it to null or a valid value. Else it will fail\n    timestamp: task.timestamp || new Date(),\n    subtasks: task.subtasks || [], // will not be saved in the DB. here just for reference...\n    description: task.description || ''\n  }\n}\n\nexport default createTaskObject;\n","const dateToday = new Date().toISOString().slice(0, 10);\n\nexport const text = {\n  loading: 'Loading app...',\n  noListName: 'New Project ' + dateToday,\n  addPh: 'Quick-add a task...',\n  addSubtaskPh: 'Add a subtask to this task',\n  addSubtaskBtn: 'Add a subtask',\n  subtasks: 'Subtasks',\n  // btn: 'Add task',\n  // title: 'MyTodo List',\n  // uncompleted: 'My tasks',\n  allTasksCompleted: () => {\n    const incomplete = [\n      '😁 All tasks completed!',\n      'Now that\\'s what I call a clean list 🥳',\n      'Wow, such empty 👏',\n      'Finitto? Go for a cappuccino ☕️',\n      'All tasks done, time for a break 🏖',\n      'So productive. I\\'m impressed 😎',\n      'Make a Todolist: Done ✅',\n      'I am Finnish 🇫🇮 with all tasks.'\n    ];\n    return incomplete[Math.floor(Math.random() * incomplete.length)];\n  },\n  completed: 'Completed',\n  completedNo: 'No completed tasks',\n  showCompleted: 'Show completed tasks',\n  hideCompleted: 'Hide completed tasks',\n\n  saveTask: 'Save',\n  discardTask: 'Cancel changes',\n\n  notes: 'Notes',\n  notesPh: 'An optional description always helps',\n\n  projects: 'Projects',\n  addProject: 'Add a new project',\n  addProjectPh: 'Enter a name for a new project',\n  deleteProject: 'Delete this project and all the tasks? (cannot be undone)'\n\n};\n","import firebase from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDxmJzv3ccl0_ouKB9oVSzWIsn6uysYMLQ\",\n  authDomain: \"todo-list-react-33431.firebaseapp.com\",\n  databaseURL: \"https://todo-list-react-33431.firebaseio.com\",\n  projectId: \"todo-list-react-33431\",\n  storageBucket: \"todo-list-react-33431.appspot.com\",\n  messagingSenderId: \"153291173882\",\n  appId: \"1:153291173882:web:4eb5673b9a70ce5828fe43\",\n  measurementId: \"G-BCMCPMQHDB\"\n};\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\n// export const auth = firebase.auth;\nexport const db = firebase.database();\n","import { db } from './firebase';\n\nconst user = 'nicoemailcom';\n\nconst taskService = {\n\n  db: db,\n\n  path: '',\n\n  updateTask: async (task) => {\n    console.log('Updating task ', task.name);\n    try {\n      return await db.ref(`${ taskService.path }/tasks/${ task.key }`).update(task);\n    } catch (e) {\n      console.error('Error on update: ', e);\n    }\n  },\n\n  addTask: async (task) => {\n    console.log('Added task ', task.name);\n    try {\n      return await db.ref(`${ taskService.path }/tasks`).push(task);\n    } catch (e) {\n      console.error('Error on save: ', e);\n    }\n  },\n\n  deleteTask: async (task, tasks) => {\n    console.log('Deleting task ', task.name);\n    const index = tasks.findIndex((_task) => _task.key === task.key);\n    if (index >= 0) {\n      await db.ref(`${ taskService.path }/tasks/${ task.key }`).remove(() => {\n        console.log(`\"${ task.name }\" was removed!`);\n      });\n    }\n  },\n\n  getProject: (projectKey, done) => {\n    taskService.path = `lists/${ user }/${ projectKey }`;\n\n    try {\n      return db.ref(taskService.path).on('value', (snapshot) => {\n\n        const projectName = snapshot.child('name').val();\n\n        const project = {\n          key: snapshot.key,\n          name: projectName,\n          tasks: []\n        };\n\n        snapshot.child('tasks').forEach((task) => {\n          project.tasks.push({\n            key: task.key,\n            subtasks: [],\n            ...task.val(),\n          });\n        })\n\n        done(project);\n\n      });\n    } catch (e) {\n      console.error('Error on fetching tasks: ', e);\n    }\n  },\n\n  getProjects: (done) => {\n    try {\n      return db.ref(`lists/${ user }`).on('value', (snapshot) => {\n\n        const projects = [];\n        snapshot.forEach((project) => {\n          const projectData = project.val();\n          const tasks = Object.values(projectData.tasks || '' /* empty object actually... */);\n          const completedTasks = tasks.filter((t) => t.checked).length;\n          const openTasks = tasks.length - completedTasks;\n          projects.push({\n            key: project.key,\n            name: projectData.name,\n            openTasks,\n            completedTasks\n          });\n        })\n\n        done(projects);\n\n        console.log('Lists loaded: ', projects.length);\n      });\n    } catch (e) {\n      console.error('Error on fetching tasks: ', e);\n    }\n  },\n\n  saveListName: async (projectName) => {\n    console.log('Updating list name ', projectName);\n\n    try {\n      return await db.ref(`${ taskService.path }`).update({ name: projectName });\n    } catch (e) {\n      console.error('Error on save name: ', e);\n    }\n  },\n\n  newProject: async (projectName) => {\n    try {\n      return await db.ref(`lists/${ user }`).push({ name: projectName });\n    } catch (e) {\n      console.error('Error on create project: ', e);\n    }\n  },\n\n  deleteProject: async (project) => {\n    try {\n      console.log('Deleting project ', project.name);\n      return await db.ref(`lists/${ user }/${ project.key }`).remove()\n    } catch (e) {\n      console.error('Error on delete project: ', e);\n    }\n  }\n};\n\nexport default taskService;\n","import Modal from './Modal';\nimport React, { useEffect, useState } from 'react';\nimport createTaskObject from 'functions/createTaskObject';\nimport { text } from '../../text';\nimport taskService from '../../services/taskService';\n\nfunction TaskModal ({ trigger, task, modalOpen, setModalOpen }) {\n\n  const [subtaskName, setSubtaskName] = useState('');\n  const [subtasks, setSubtasks] = useState(task.subtasks || []);\n  const [taskName, setTaskName] = useState(task.name || '');\n  const [taskDesc, setTaskDesc] = useState(task.description || '');\n\n  useEffect(() => {\n    setTaskName(task.name || '');\n    setSubtasks(task.subtasks || []);\n    setTaskDesc(task.description || '');\n  }, [task]);\n\n  async function saveTask (task, keepOpen) {\n    if (task.key) {\n      await taskService.updateTask(task);\n    } else {\n      taskService.addTask(createTaskObject(task)).then((reference) => {\n        task.key = reference.key;\n      });\n    }\n    setModalOpen(!!keepOpen);\n  }\n\n  async function submit (e) {\n    e.preventDefault();\n\n    task.name = taskName;\n    task.description = taskDesc;\n    task.subtasks = subtasks;\n\n    await saveTask(task, false);\n  }\n\n  function toggleSubtask (subtask) {\n    subtask.checked = !subtask.checked;\n    setSubtasks([...task?.subtasks]);\n  }\n\n  function saveSubtask (e) {\n    e.preventDefault();\n\n    setSubtasks([\n      ...subtasks,\n      {\n        key: Math.random(),\n        timestamp: new Date(),\n        name: subtaskName,\n        checked: false\n      }\n    ]);\n    e.target[0].value = '';\n  }\n\n  async function onAccept (e) {\n    await submit(e);\n    setModalOpen(false);\n  }\n\n  return (\n    <>\n      <button className={ trigger.className } onClick={ () => setModalOpen(true) }>{ trigger.text }</button>\n      <Modal\n        modalOpen={ modalOpen }\n        onAccept={ onAccept }\n        onCancel={ () => setModalOpen(false) }\n        okButton={ text.saveTask + ' <i class=\"material-icons right\">save</i>' }\n        cancelButton={ text.discardTask + ' <i class=\"material-icons right\">cancel</i>' }\n      >\n        <form onSubmit={ submit }>\n          <div>\n            <label>Task Name</label>\n            <input\n              value={ taskName }\n              placeholder=\"Enter a name for the task\"\n              onChange={ (e) => setTaskName(e.target.value) }\n            />\n          </div>\n          <div>\n            <label>{ text.notes }</label>\n            <textarea\n              value={ taskDesc }\n              className=\"materialize-textarea\"\n              placeholder={ text.notesPh }\n              onChange={ (e) => setTaskDesc(e.target.value) }\n            />\n          </div>\n        </form>\n\n        <ul className=\"list-unstyled flex-column\">\n          {\n            subtasks.map((sub) =>\n              <li key={ sub.key } title={ sub.timestamp } className=\"block\">\n                <label className=\"left\">\n                  <input\n                    type=\"checkbox\" checked={ sub.checked }\n                    id={ sub.key }\n                    className=\"material-cb\"\n                    onChange={ () => toggleSubtask(sub) }\n                  />\n                  <div/>\n                </label>\n                <span className=\"left\">{ sub.name }</span>\n              </li>\n            )\n          }\n          <li key=\"new-subtask\">\n            <form onSubmit={ saveSubtask }>\n              <label>{ text.subtasks }</label>\n              <input\n                onChange={ (e) => setSubtaskName(e.target.value) }\n                placeholder={ text.addSubtaskPh }\n                className=\"input-field\"\n              />\n            </form>\n          </li>\n        </ul>\n      </Modal>\n    </>\n  );\n}\n\nexport default TaskModal;\n","import { text } from 'text';\nimport React, { useState } from 'react';\nimport taskService from '../../../services/taskService';\n\nfunction Subtask ({ extraClass, task, setSubtasks }) {\n\n  const [subtaskName, setSubtaskName] = useState('');\n  const [addSubtaskInput, setAddSubtaskInput] = useState(false);\n\n  function saveSubtask (e) {\n    e.preventDefault();\n    e.target[0].value = '';\n    setAddSubtaskInput(false);\n\n    task.subtasks = [\n      ...(task.subtasks || []),\n      {\n        key: Math.random(),\n        timestamp: new Date(),\n        name: subtaskName,\n        checked: false\n      }\n    ];\n    taskService.updateTask(task);\n\n  }\n\n  function toggleSubtask (subtask) {\n    subtask.checked = !subtask.checked;\n    taskService.updateTask(task);\n    setSubtasks(task.subtasks);\n  }\n\n  return (\n    <ul className={ 'list-unstyled flex-column ' + extraClass }>\n      {\n        (task.subtasks || []).map((sub) =>\n          <li key={ sub.key } title={ sub.timestamp } className=\"block\">\n            <label className=\"left\">\n              <input\n                type=\"checkbox\" checked={ sub.checked }\n                id={ sub.key } className=\"material-cb\"\n                onChange={ () => toggleSubtask(sub) }\n              />\n              <div/>\n            </label>\n            <span className=\"left\">{ sub.name }</span>\n          </li>\n        )\n      }\n      <li key=\"new-subtask\">\n        {\n          addSubtaskInput\n            ?\n            <form onSubmit={ saveSubtask }>\n              <input\n                onChange={ (e) => setSubtaskName(e.target.value) }\n                placeholder={ text.addSubtaskPh }\n                autoFocus={ true }\n                className=\"input-field invisible\"\n              />\n            </form>\n            :\n            <button className=\"btn-flat subtle\" onClick={ () => setAddSubtaskInput(true) }>\n              <i className=\"material-icons left\">add</i>\n              { text.addSubtaskBtn }\n            </button>\n        }\n      </li>\n    </ul>\n  );\n}\n\nexport default Subtask;\n","import React, { useEffect, useState } from 'react';\nimport './_task.scss';\nimport TaskModal from 'components/Modal/TaskModal';\nimport Subtask from './Subtask';\nimport { text } from 'text';\nimport taskService from '../../../services/taskService';\n\nfunction Task ({ task, onDelete }) {\n\n  const [subtasks, setSubtasks] = useState(task.subtasks || []);\n  const [mainCheckDisabled, setMainCheckDisabled] = useState(!!subtasks.find((s) => s.checked === false));\n  const [expandedTask, setExpandedTask] = useState(mainCheckDisabled);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    setMainCheckDisabled(!!task.subtasks.find((s) => s.checked === false))\n  }, [task.subtasks])\n\n  async function toggleCompleted (task) {\n    task.checked = !task.checked;\n    await taskService.updateTask(task);\n  }\n\n  return (\n    <li className={ (task.checked ? 'done' : '') + ' parent-hover task' } title={ task.timestamp }>\n      <div className=\"task-content\">\n        <label className=\"left\">\n          <input\n            type=\"checkbox\"\n            className=\"material-cb\"\n            disabled={ mainCheckDisabled }\n            checked={ task.checked }\n            onChange={ () => toggleCompleted(task) }\n          />\n          <div/>\n        </label>\n        <button className={ 'btn-invisible task-name ' + (task.checked ? '' : '') } onClick={ () => setModalOpen(true) }\n        >{ task.name }</button>\n\n        <span className=\"right\">\n          <button\n            className=\"child-hover btn-subtle ml-5 material-icons right\"\n            onClick={ () => onDelete(task) }\n          >delete\n          </button>\n          <button\n            className=\"child-hover toggle-expand btn-subtle ml-5 material-icons right\"\n            onClick={ () => setExpandedTask(!expandedTask) }\n          >add\n          </button>\n          <TaskModal\n            trigger={ {\n              className: 'child-hover btn-subtle ml-5 material-icons right',\n              text: 'edit'\n            } } task={ { ...task } }\n            modalOpen={ modalOpen }\n            setModalOpen={ setModalOpen }\n          />\n        </span>\n      </div>\n      {\n        expandedTask &&\n        <>\n          {\n            task.description &&\n            <div className=\"ml-50\">\n              <p><span className=\"subtle\">{ text.notes }:</span> { task.description }</p>\n            </div>\n          }\n          <Subtask extraClass={ 'ml-50' } setSubtasks={ setSubtasks } subtasks={ subtasks } task={ task }/>\n        </>\n      }\n    </li>\n  );\n}\n\nexport default Task;\n","import React from 'react';\nimport { text } from 'text';\n\nfunction ProjectTitle ({ project, showCompleted, setShowCompleted }) {\n  return (\n    project.editListName\n      ? <form onSubmit={ project.saveListName }>\n        <input\n          className=\"as-title m0 invisible h4\" autoFocus /*onBlur={ project.saveListName }*/\n          value={ project.listName || text.noListName }\n          onChange={ (e) => project.setListName(e.target.value) }\n        />\n      </form>\n      : <div className=\"flex-row\">\n        <h4 className=\"max-content m0\" onClick={ () => project.setEditListName(true) }>{ project.listName || text.noListName }</h4>\n        {\n          showCompleted\n            ? <button\n              className=\"material-icons ml-5 toggle-completed btn-invisible subtle\"\n              onClick={ () => setShowCompleted(false) }\n              title={ text.hideCompleted }\n            >check_box</button>\n            : <button\n              className=\"material-icons ml-5 toggle-completed btn-invisible subtle\"\n              onClick={ () => setShowCompleted(true) }\n              title={ text.showCompleted }\n            >check_box_outline_blank</button>\n        }\n      </div>\n  );\n}\n\nexport default ProjectTitle;\n","import { useMemo, useState } from 'react';\nimport './_project.scss';\nimport projectRender from 'components/Project/Project-view';\nimport taskService from 'services/taskService';\nimport createTaskObject from 'functions/createTaskObject';\nimport { text } from 'text';\n\nfunction Project ({ project }) {\n\n  const [showCompleted, setShowCompleted] = useState(true);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [listName, setListName] = useState(project.name);\n  const [editListName, setEditListName] = useState(false);\n\n  const open = (project.tasks || []).filter((task) => !task.checked);\n  const completed = (project.tasks || []).filter((task) => !!task.checked);\n\n  const allCompleted = useMemo(() => {\n    return text.allTasksCompleted()\n  }, [ open.length ]);\n\n  let taskName = '';\n\n  async function submit (e) {\n    e.preventDefault();\n\n    await taskService.addTask(createTaskObject({ name: taskName }));\n  }\n\n  function changed (e) {\n    taskName = e.target.value;\n  }\n\n  async function saveListName (e) {\n    e.preventDefault();\n\n    await taskService.saveListName(listName);\n    setEditListName(false);\n  }\n\n  return projectRender({\n    open,\n    completed,\n    deleteTask: (task) => taskService.deleteTask(task, project.tasks),\n    submit,\n    changed,\n    showCompleted,\n    setShowCompleted,\n    modalOpen,\n    allCompleted,\n    setModalOpen,\n    project: {\n      listName,\n      saveListName,\n      editListName,\n      setEditListName,\n      setListName\n    }\n  });\n}\n\nexport default Project;\n","import React from 'react';\nimport Task from 'components/Project/Task/Task';\nimport { text } from 'text';\nimport TaskModal from 'components/Modal/TaskModal';\nimport ProjectTitle from 'components/ProjectTitle/ProjectTitle';\n\n\nexport default function projectRender ({\n  submit, changed, deleteTask, completed, open, showCompleted, setShowCompleted, modalOpen, setModalOpen, allCompleted, project\n}) {\n\n  return (\n    <>\n      <ProjectTitle project={ project } showCompleted={ showCompleted } setShowCompleted={ setShowCompleted }/>\n\n      <ul className=\"list-unstyled\">\n        { open.length ?\n          open.map((task, index) =>\n            <Task\n              key={ index }\n              task={ task }\n              onDelete={ deleteTask }\n            />)\n          : (completed.length ? <li><h5 className=\"subtle max-content\">{ allCompleted }</h5></li> : '')\n        }\n        { showCompleted && completed.map((task, index) =>\n          <Task\n            key={ index }\n            task={ task }\n            onDelete={ deleteTask }\n          />) }\n      </ul>\n\n      <form className=\"form-inline\" onSubmit={ submit }>\n        <div className=\"form-group\">\n          <div className=\"input-group mb-2\">\n            <input\n              onChange={ changed } className=\"invisible\"\n              placeholder={ text.addPh } required\n              autoComplete=\"off\"\n              autoFocus\n            />\n          </div>\n        </div>\n      </form>\n\n      <TaskModal\n        trigger={ {\n          className: 'btn-floating btn-large fixed-action-btn subtle-bg',\n          text: <i className=\"material-icons\">add</i>\n        } }\n        task={ {} }\n        modalOpen={ modalOpen }\n        setModalOpen={ setModalOpen }\n      />\n    </>\n  );\n}\n","import './_app-loader.scss';\nimport { text } from 'text';\nimport React from 'react';\n\nfunction Loader () {\n  return (\n    <span className=\"app-loader\">\n      <span>{ text.loading }</span>\n    </span>\n  )\n}\n\nexport default Loader;\n","import React, { useEffect, useState } from 'react';\nimport taskService from 'services/taskService';\nimport { text } from 'text';\nimport './_projects.scss';\n\nfunction Projects ({ projectKey, setProjectKey, setShowLoader }) {\n\n  const [projects, setProjects] = useState([]);\n  const [showAddProject, setShowAddProject] = useState(false);\n\n  const [newProjectName, setNewProjectName] = useState('');\n\n  useEffect(() => {\n    console.log('loadeeeeed')\n    taskService.getProjects((_projects) => {\n\n      setProjects(_projects);\n      if (!projectKey && _projects.length) {\n        setProjectKey(_projects[0].key); // set the first project as selected...\n      }\n    });\n  }, [/* empty dependency means this function will NEVER be called again === componentDidMount */]);\n\n  function addNewProject (e) {\n    e.preventDefault();\n\n    taskService.newProject(newProjectName).then((snap) => {\n      setShowAddProject(false);\n      setNewProjectName('');\n      console.log(setProjectKey(snap.key));\n    });\n  }\n\n  async function deleteProject (project) {\n    if (window.confirm(text.deleteProject)) {\n      setShowLoader(true);\n      setProjectKey('');\n      await taskService.deleteProject(project);\n    }\n  }\n\n  function setProject (project) {\n    if (project.key === projectKey) {\n      return; // can't change to itself... it also causes a re-render problem in the `useEffect`\n    }\n    // setShowLoader(true);\n    setProjectKey(project.key);\n  }\n\n  return (\n    <>\n      <h4>{ text.projects }</h4>\n      <ul className=\"projects-list flex-column\">\n        {\n          projects.map((proj) =>\n            <li key={ proj.key } className={ ( projectKey === proj.key ? 'selected' : '' ) + ' mb-5 parent-hover '}>\n              <button className=\"btn-invisible left\" onClick={ () => setProject(proj) }>\n                { proj.name } ( { proj.openTasks } <span className=\"subtle\">/ { proj.completedTasks }</span> )\n              </button>\n              <button className=\"btn-invisible child-hover left\" onClick={ () => deleteProject(proj) }>\n                <i className=\"tiny material-icons subtle\">delete</i>\n              </button>\n            </li>\n          )\n        }\n        <li>\n          {\n            showAddProject\n              ? <form onSubmit={ addNewProject }>\n                <input\n                  className=\"invisible subtle\" onChange={ (e) => setNewProjectName(e.target.value) }\n                  required minLength=\"3\"\n                  value={ newProjectName } autoFocus placeholder={ text.addProjectPh } onBlur={ () => setShowAddProject(false) }\n                />\n              </form>\n              : <button className=\"btn-invisible btn-flat subtle\" onClick={ () => setShowAddProject(true) }>\n                <i className=\"material-icons left tiny\">add</i>{ text.addProject }\n              </button>\n          }\n        </li>\n      </ul>\n    </>\n  );\n}\n\nexport default Projects;\n","import React, { useEffect, useState } from 'react';\nimport Project from 'components/Project/Project';\nimport taskService from './services/taskService';\nimport Loader from 'components/Loader/Loader';\nimport Projects from './components/Projects/Projects';\n\nfunction App () {\n\n  const [projectKey, setProjectKey] = useState(window.location.hash.substring(1));\n\n  const [project, setProject] = useState({});\n  const [showLoader, setShowLoader] = useState(true);\n\n  const ProjectContext = React.createContext(project.key);\n\n  useEffect(() => {\n    window.location.hash = projectKey;\n\n    taskService.getProject(projectKey, (project) => {\n      setProject(project);\n      setShowLoader(false);\n    });\n\n    return () => {\n      taskService.db.ref(taskService.path).off('value');\n    };\n  }, [projectKey]);\n\n  return (\n    <>\n      { showLoader && <Loader/> }\n      <div className=\"row m0\">\n        <div className=\"col s3 projects-list-box\">\n          <Projects projectKey={ projectKey } setProjectKey={ setProjectKey } setShowLoader={ setShowLoader }/>\n        </div>\n        <div className=\"col s9 tasks-list-box flex-column\">\n          <ProjectContext.Provider value={ project.key }>\n            <Project project={ project }/>\n          </ProjectContext.Provider>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sass/index.scss';\n// import 'materialize-css/dist/js/materialize.min.js';\nimport App from 'App';\n\n// ======================================== //\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}