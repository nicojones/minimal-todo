{"version":3,"sources":["components/Modal/Modal.js","functions/createTaskObject.js","text.js","services/firebase.js","services/taskService.js","components/Modal/TaskModal.js","components/Todo/Task/Subtask.js","components/Todo/Task/Task.js","components/Todo/Todo.js","components/Todo/Todo-view.js","components/Loader/Loader.js","App.js","index.js"],"names":["Modal","children","modalOpen","okButton","cancelButton","onAccept","onCancel","Fragment","className","onClick","dangerouslySetInnerHTML","__html","createTaskObject","task","name","checked","key","timestamp","Date","subtasks","description","text","incomplete","Math","floor","random","length","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","taskService","updateTask","a","console","log","ref","update","error","addTask","push","deleteTask","tasks","findIndex","_task","remove","getTasks","taskSetter","showLoader","on","snapshot","forEach","snap","val","e","TaskModal","trigger","setModalOpen","useState","subtaskName","setSubtaskName","setSubtasks","taskName","setTaskName","taskDesc","setTaskDesc","saveTask","keepOpen","then","reference","submit","preventDefault","useEffect","onSubmit","value","placeholder","onChange","target","map","sub","title","type","id","subtask","Subtask","extraClass","Task","onDelete","find","s","mainCheckDisabled","setMainCheckDisabled","expandedTask","setExpandedTask","disabled","toggleCompleted","href","Todo","showCompleted","setShowCompleted","open","filter","completed","allCompleted","useMemo","inputElement","useRef","current","changed","required","autoComplete","index","todoRenderer","Loader","App","setTasks","setShowLoader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fec293c0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Modal ({ children, modalOpen, okButton, cancelButton, onAccept, onCancel }) {\n\n  return (\n    <React.Fragment>\n      <div className={ 'z-depth-5 modal ' + (modalOpen ? 'open' : '') }>\n        <div className=\"modal-content\">\n          { children }\n        </div>\n        <div className=\"modal-footer\">\n          {\n            okButton &&\n            <button\n              onClick={ onAccept }\n              className=\"modal-close waves-effect waves-green btn-flat btn\"\n              dangerouslySetInnerHTML={ { __html: okButton } }\n            />\n          }\n          {\n            cancelButton &&\n            <button\n              onClick={ onCancel }\n              className=\"modal-close waves-effect waves-red btn-flat btn left\"\n              dangerouslySetInnerHTML={ { __html: cancelButton } }\n            />\n          }\n        </div>\n      </div>\n      <div className=\"backdrop\" onClick={ onCancel }/>\n    </React.Fragment>\n  );\n}\n\nexport default Modal;\n","function createTaskObject (task) {\n  return {\n    name: task.name || '',\n    checked: task.checked || false,\n    key: task.key || null, // set it to null or a valid value. Else it will fail\n    timestamp: task.timestamp || new Date(),\n    subtasks: task.subtasks || [], // will not be saved in the DB. here just for reference...\n    description: task.description || ''\n  }\n}\n\nexport default createTaskObject;\n","export const text = {\n  addPh: 'Quick-add a task...',\n  addSubtaskPh: 'Add a subtask to this task',\n  subtasks: 'Subtasks',\n  // btn: 'Add task',\n  // title: 'MyTodo List',\n  // uncompleted: 'My tasks',\n  allTasksCompleted: () => {\n    const incomplete = [\n      '😁 All tasks completed!',\n      'Now that\\'s what I call a clean list 🥳',\n      'Wow, such empty 👏',\n      'All tasks done, time for a break 🏖',\n      'So productive. I\\'m impressed 😎'\n    ];\n    return incomplete[Math.floor(Math.random() * incomplete.length)];\n  },\n  completed: 'Completed',\n  completedNo: 'No completed tasks',\n  showCompleted: 'Show completed tasks',\n  hideCompleted: 'Hide completed tasks',\n\n  saveTask: 'Save',\n  discardTask: 'Cancel changes',\n\n  notes: 'Notes',\n  notesPh: 'An optional description always helps'\n\n};\n","import firebase from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDxmJzv3ccl0_ouKB9oVSzWIsn6uysYMLQ\",\n  authDomain: \"todo-list-react-33431.firebaseapp.com\",\n  databaseURL: \"https://todo-list-react-33431.firebaseio.com\",\n  projectId: \"todo-list-react-33431\",\n  storageBucket: \"todo-list-react-33431.appspot.com\",\n  messagingSenderId: \"153291173882\",\n  appId: \"1:153291173882:web:4eb5673b9a70ce5828fe43\",\n  measurementId: \"G-BCMCPMQHDB\"\n};\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\n// export const auth = firebase.auth;\nexport const db = firebase.database();\n","import { db } from './firebase';\n\nconst taskService = {\n\n  updateTask: async (task) => {\n    console.log('Updating task ', task.name);\n    try {\n      return await db.ref(`todos/${ task.key }`).update(task);\n    } catch (e) {\n      console.error('Error on update: ', e);\n    }\n  },\n\n  addTask: async (task) => {\n    console.log('Added task ', task.name);\n    try {\n      return await db.ref('todos').push(task);\n    } catch (e) {\n      console.error('Error on save: ', e);\n    }\n  },\n\n  deleteTask: async (task, tasks) => {\n    console.log('Deleting task ', task.name);\n    const index = tasks.findIndex((_task) => _task.key === task.key);\n    if (index >= 0) {\n      await db.ref(`todos/${ task.key }`).remove(() => {\n        console.log(`\"${ task.name }\" was removed!`);\n      });\n    }\n  },\n\n  getTasks: (taskSetter, showLoader) => {\n    try {\n      return db.ref('todos').on('value', (snapshot) => {\n        const tasks = [];\n        snapshot.forEach((snap) => {\n          tasks.push({\n            ...snap.val(),\n            key: snap.key\n          });\n        });\n        taskSetter(tasks);\n        showLoader(false);\n\n        console.log('Tasks loaded: ', tasks.length)\n      });\n    } catch (e) {\n      console.error('Error on fetching tasks: ', e);\n    }\n  }\n};\n\nexport default taskService;\n","import Modal from './Modal';\nimport React, { useEffect, useState } from 'react';\nimport createTaskObject from 'functions/createTaskObject';\nimport { text } from '../../text';\nimport taskService from '../../services/taskService';\n\nfunction TaskModal ({ trigger, task, modalOpen, setModalOpen }) {\n\n  const [subtaskName, setSubtaskName] = useState('');\n  const [subtasks, setSubtasks] = useState(task.subtasks || []);\n  const [taskName, setTaskName] = useState(task.name || '');\n  const [taskDesc, setTaskDesc] = useState(task.description || '');\n\n  useEffect(() => {\n    setTaskName(task.name || '');\n    setSubtasks(task.subtasks || []);\n    setTaskDesc(task.description || '');\n  }, [task]);\n\n  async function saveTask (task, keepOpen) {\n    if (task.key) {\n      await taskService.updateTask(task);\n    } else {\n      taskService.addTask(createTaskObject(task)).then((reference) => {\n        task.key = reference.key;\n      });\n    }\n    setModalOpen(!!keepOpen);\n  }\n\n  async function submit (e) {\n    e.preventDefault();\n\n    task.name = taskName;\n    task.description = taskDesc;\n    task.subtasks = subtasks;\n\n    await saveTask(task, false);\n  }\n\n  function toggleSubtask (subtask) {\n    subtask.checked = !subtask.checked;\n    setSubtasks([...task?.subtasks]);\n  }\n\n  function saveSubtask (e) {\n    e.preventDefault();\n\n    setSubtasks([\n      ...subtasks,\n      {\n        key: Math.random(),\n        timestamp: new Date(),\n        name: subtaskName,\n        checked: false\n      }\n    ]);\n    e.target[0].value = '';\n  }\n\n  async function onAccept (e) {\n    await submit(e);\n    setModalOpen(false);\n  }\n\n  return (\n    <React.Fragment>\n      <button className={ trigger.className } onClick={ () => setModalOpen(true) }>{ trigger.text }</button>\n      <Modal\n        modalOpen={ modalOpen }\n        onAccept={ onAccept }\n        onCancel={ () => setModalOpen(false) }\n        okButton={ text.saveTask + ' <i class=\"material-icons right\">save</i>' }\n        cancelButton={ text.discardTask + ' <i class=\"material-icons right\">cancel</i>' }\n      >\n        <form onSubmit={ submit }>\n          <div>\n            <label>Task Name</label>\n            <input\n              value={ taskName }\n              placeholder=\"Enter a name for the task\"\n              onChange={ (e) => setTaskName(e.target.value) }\n            />\n          </div>\n          <div>\n            <label>{ text.notes }</label>\n            <textarea\n              value={ taskDesc }\n              className=\"materialize-textarea\"\n              placeholder={ text.notesPh }\n              onChange={ (e) => setTaskDesc(e.target.value) }\n            />\n          </div>\n        </form>\n\n        <ul className=\"list-unstyled flex-column\">\n          {\n            subtasks.map((sub) =>\n              <li key={ sub.key } title={ sub.timestamp } className=\"block\">\n                <label className=\"left\">\n                  <input\n                    type=\"checkbox\" checked={ sub.checked }\n                    id={ sub.key }\n                    onChange={ () => toggleSubtask(sub) }\n                  />\n                  <span> </span>\n                </label>\n                <span className=\"left\">{ sub.name }</span>\n              </li>\n            )\n          }\n          <li key=\"new-subtask\">\n            <form onSubmit={ saveSubtask }>\n              <label>{ text.subtasks }</label>\n              <input\n                onChange={ (e) => setSubtaskName(e.target.value) }\n                placeholder={ text.addSubtaskPh }\n                className=\"input-field\"\n              />\n            </form>\n          </li>\n        </ul>\n      </Modal>\n    </React.Fragment>\n  );\n}\n\nexport default TaskModal;\n","import { text } from 'text';\nimport React, { useState } from 'react';\nimport taskService from '../../../services/taskService';\n\nfunction Subtask ({ extraClass, task, setSubtasks }) {\n\n  const [subtaskName, setSubtaskName] = useState('');\n\n  function saveSubtask (e) {\n    e.preventDefault();\n    e.target[0].value = '';\n\n    task.subtasks = [\n      ...(task.subtasks || []),\n      {\n        key: Math.random(),\n        timestamp: new Date(),\n        name: subtaskName,\n        checked: false\n      }\n    ];\n    taskService.updateTask(task);\n  }\n\n  function toggleSubtask (subtask) {\n    subtask.checked = !subtask.checked;\n    taskService.updateTask(task);\n    setSubtasks(task.subtasks);\n  }\n\n  return (\n    <ul className={'list-unstyled flex-column ' + extraClass}>\n      {\n        (task.subtasks || []).map((sub) =>\n          <li key={ sub.key } title={ sub.timestamp } className=\"block\">\n            <label className=\"left\">\n              <input\n                type=\"checkbox\" checked={ sub.checked }\n                id={ sub.key }\n                onChange={ () => toggleSubtask(sub) }\n              />\n              <span> </span>\n            </label>\n            <span className=\"left\">{ sub.name }</span>\n          </li>\n        )\n      }\n      <li key=\"new-subtask\">\n        <form onSubmit={ saveSubtask }>\n          <input\n            onChange={ (e) => setSubtaskName(e.target.value) }\n            placeholder={ text.addSubtaskPh }\n            className=\"input-field invisible\"\n          />\n        </form>\n      </li>\n    </ul>\n  )\n}\n\nexport default Subtask;\n","import React, { useEffect, useState } from 'react';\nimport './_task.scss';\nimport TaskModal from 'components/Modal/TaskModal';\nimport Subtask from './Subtask';\nimport { text } from 'text';\nimport taskService from '../../../services/taskService';\n\nfunction Task ({ task, onDelete }) {\n\n  const [subtasks, setSubtasks] = useState(task.subtasks || []);\n  const [mainCheckDisabled, setMainCheckDisabled] = useState(!!subtasks.find((s) => s.checked === false));\n  const [expandedTask, setExpandedTask] = useState(mainCheckDisabled);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    setMainCheckDisabled(!!task.subtasks.find((s) => s.checked === false))\n  }, [task.subtasks])\n\n  async function toggleCompleted (task) {\n    task.checked = !task.checked;\n    await taskService.updateTask(task);\n  }\n\n  return (\n    <li className={ (task.checked ? 'done' : '') + ' parent-hover task' } title={ task.timestamp }>\n      <div>\n        <label className=\"left\">\n          <input\n            type=\"checkbox\"\n            disabled={ mainCheckDisabled }\n            checked={ task.checked }\n            onChange={ () => toggleCompleted(task) }\n          />\n          <span> </span>\n        </label>\n        <a\n          href=\"#!\" className={ 'task-name ' + (task.checked ? '' : '') } onClick={ () => setModalOpen(true) }\n        >{ task.name }</a>\n\n        <span className=\"right\">\n          <button\n            className=\"child-hover btn-subtle ml-5 material-icons right\"\n            onClick={ () => onDelete(task) }\n          >delete\n          </button>\n          <button\n            className=\"child-hover toggle-expand btn-subtle ml-5 material-icons right\"\n            onClick={ () => setExpandedTask(!expandedTask) }\n          >add\n          </button>\n          <TaskModal\n            trigger={ {\n              className: 'child-hover btn-subtle ml-5 material-icons right',\n              text: 'edit'\n            } } task={ { ...task } }\n            modalOpen={ modalOpen }\n            setModalOpen={ setModalOpen }\n          />\n        </span>\n      </div>\n      {\n        expandedTask &&\n        <>\n          {\n            task.description &&\n            <div className=\"ml-50\">\n              <p><span className=\"subtle\">{ text.notes }:</span> { task.description }</p>\n            </div>\n          }\n          <Subtask extraClass={ 'ml-50' } setSubtasks={ setSubtasks } subtasks={ subtasks } task={ task }/>\n        </>\n      }\n    </li>\n  );\n}\n\nexport default Task;\n","import { useMemo, useRef, useState } from 'react';\nimport './_todo.scss';\nimport todoRenderer from 'components/Todo/Todo-view';\nimport taskService from 'services/taskService';\nimport createTaskObject from 'functions/createTaskObject';\nimport { text } from '../../text';\n\nfunction Todo ({ tasks }) {\n\n  const [showCompleted, setShowCompleted] = useState(true);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const open = tasks.filter((task) => !task.checked);\n  const completed = tasks.filter((task) => !!task.checked);\n\n  const allCompleted = useMemo(() => text.allTasksCompleted(), [open.length]);\n\n  let taskName = '';\n  const inputElement = useRef(null);\n\n  async function submit (e) {\n    e.preventDefault();\n\n    await taskService.addTask(createTaskObject({ name: taskName }));\n\n    inputElement.current.value = '';\n  }\n\n  function changed (e) {\n    taskName = e.target.value;\n  }\n\n  return todoRenderer({\n    inputElement,\n    open,\n    completed,\n    deleteTask: (task) => taskService.deleteTask(task, tasks),\n    submit,\n    changed,\n    showCompleted,\n    setShowCompleted,\n    modalOpen,\n    allCompleted,\n    setModalOpen\n  });\n}\n\nexport default Todo;\n","import React, { useMemo } from 'react';\nimport Task from 'components/Todo/Task/Task';\nimport { text } from 'text';\nimport TaskModal from '../Modal/TaskModal';\n\n\nexport default function todoRenderer ({\n  inputElement, submit, changed, deleteTask, completed, open, showCompleted, setShowCompleted, modalOpen, setModalOpen, allCompleted\n}) {\n\n  return (\n    <>\n      <form className=\"form-inline\" onSubmit={ submit }>\n        <div className=\"form-group\">\n          <div className=\"input-group mb-2\">\n            <input\n              onChange={ changed } className=\"form-control\" id=\"todo-name\"\n              ref={ inputElement }\n              placeholder={ text.addPh } required\n              autoComplete=\"off\"\n            />\n          </div>\n        </div>\n      </form>\n\n      { open.length ?\n        <ul className=\"list-unstyled\">\n          { open.map((task, index) =>\n            <Task\n              key={ index }\n              task={ task }\n              onDelete={ deleteTask }\n            />) }\n        </ul>\n        : <h4 className=\"left subtle center-align\">{ allCompleted }</h4>\n      }\n\n      { completed.length ?\n        (\n          showCompleted\n            ?\n            <React.Fragment>\n              <hr/>\n              <button className=\"btn-flat\" onClick={ () => setShowCompleted(false) }>{ text.hideCompleted }</button>\n              <ul className=\"list-unstyled completed\">\n                { completed.map((task, index) =>\n                  <Task\n                    key={ index }\n                    task={ task }\n                    onDelete={ deleteTask }\n                  />) }\n              </ul>\n            </React.Fragment>\n            :\n            <React.Fragment>\n              <hr/>\n              <button className=\"btn-flat\" onClick={ () => setShowCompleted(true) }>{ text.showCompleted }</button>\n            </React.Fragment>\n        )\n        : <h5 className=\"left subtle center-align\">{ text.completedNo }</h5>\n      }\n\n      <TaskModal\n        trigger={ {\n          className: 'btn-floating btn-large green fixed-action-btn',\n          text: <i className=\"material-icons\">add</i>\n        } }\n        task={ {} }\n        modalOpen={ modalOpen }\n        setModalOpen={ setModalOpen }\n      />\n    </>\n  );\n}\n","function Loader () {\n  return (\n    <h1>Loading...</h1>\n  )\n}\n\nexport default Loader;\n","import React, { useEffect, useState } from 'react';\nimport Todo from 'components/Todo/Todo';\nimport taskService from './services/taskService';\nimport Loader from 'components/Loader/Loader';\n\nfunction App () {\n\n  const [tasks, setTasks] = useState([]);\n  const [showLoader, setShowLoader] = useState(true);\n\n  useEffect(() => {\n    taskService.getTasks(setTasks, setShowLoader)\n  }, [/* empty dependency means this function will NEVER be called again === componentDidMount */]);\n\n  return (\n    <React.Fragment>\n      <div className=\"container flex-column\" id=\"todo\">\n        {\n          showLoader\n          ? <Loader/>\n          : <Todo tasks={ tasks } />\n        }\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sass/index.scss';\n// import 'materialize-css/dist/js/materialize.min.js';\nimport App from 'App';\n\n// ======================================== //\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}