{"version":3,"sources":["components/Modal/Modal.js","functions/createTaskObject.js","text.js","services/firebase.js","services/taskService.js","components/Modal/TaskModal.js","components/Project/Task/Subtask.js","components/Project/Task/Task.js","components/ProjectTitle/ProjectTitle.js","components/Project/Project.js","components/Project/Project-view.js","components/Loader/Loader.js","components/Projects/Projects.js","App.js","index.js"],"names":["Modal","children","modalOpen","okButton","cancelButton","onAccept","onCancel","className","onClick","dangerouslySetInnerHTML","__html","createTaskObject","task","name","checked","key","timestamp","Date","subtasks","description","text","loading","noListName","toISOString","slice","addPh","addSubtaskPh","addSubtaskBtn","subtaskStatus","deleteTask","allTasksCompleted","incomplete","Math","floor","random","length","completed","completedNo","showCompleted","hideCompleted","saveTask","discardTask","notes","notesPh","projects","addProject","addProjectPh","deleteProject","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","user","taskService","path","updateTask","a","console","info","ref","update","error","addTask","push","remove","getProject","projectKey","done","on","snapshot","projectName","child","val","project","tasks","forEach","e","getProjects","projectData","Object","values","completedTasks","filter","t","openTasks","saveListName","newProject","TaskModal","trigger","setModalOpen","useState","subtaskName","setSubtaskName","setSubtasks","newSubtasks","setNewSubtasks","taskName","setTaskName","taskDesc","setTaskDesc","useContext","ProjectContext","keepOpen","then","reference","submit","preventDefault","useEffect","onSubmit","value","required","minLength","placeholder","onChange","target","map","sub","title","type","id","subtask","disabled","Subtask","extraClass","saveSubtasks","addSubtaskInput","setAddSubtaskInput","autoFocus","Task","expandedTask","setExpandedTask","completedSubtasks","s","_task","expanded","isExpanded","window","confirm","toggleExpanded","toggleCompleted","onDelete","ProjectTitle","setShowCompleted","editListName","setProjectName","setEditListName","Project","open","allCompleted","useMemo","changed","autoComplete","projectRender","Loader","Projects","setProjectKey","setShowLoader","setProjects","showAddProject","setShowAddProject","newProjectName","setNewProjectName","_projects","p","validProjectKey","proj","snap","onBlur","React","createContext","App","location","hash","substring","setProject","showLoader","off","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3b930f2.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Modal ({ children, modalOpen, okButton, cancelButton, onAccept, onCancel }) {\n\n  return (\n    <>\n      {\n        modalOpen ? <>\n          <div className={ 'z-depth-5 modal open' }>\n            <div className=\"modal-content\">\n              { children }\n            </div>\n            <div className=\"modal-footer\">\n              {\n                okButton &&\n                <button\n                  onClick={ onAccept }\n                  className=\"modal-close waves-effect waves-green btn-flat btn\"\n                  dangerouslySetInnerHTML={ { __html: okButton } }\n                />\n              }\n              {\n                cancelButton &&\n                <button\n                  onClick={ onCancel }\n                  className=\"modal-close waves-effect waves-red btn-flat btn left\"\n                  dangerouslySetInnerHTML={ { __html: cancelButton } }\n                />\n              }\n            </div>\n          </div>\n          <div className=\"backdrop\" onClick={ onCancel }/>\n        </>\n        : ''\n      }\n    </>\n  );\n}\n\nexport default Modal;\n","function createTaskObject (task) {\n  return {\n    name: task.name || '',\n    checked: task.checked || false,\n    key: task.key || null, // set it to null or a valid value. Else it will fail\n    timestamp: task.timestamp || new Date(),\n    subtasks: task.subtasks || [], // will not be saved in the DB. here just for reference...\n    description: task.description || ''\n  }\n}\n\nexport default createTaskObject;\n","const dateToday = new Date().toISOString().slice(0, 10);\n\nexport const text = {\n  loading: 'Loading app...',\n  noListName: 'New Project ' + dateToday,\n  addPh: 'Quick-add a task...',\n  addSubtaskPh: 'Add subtasks to this task',\n  addSubtaskBtn: 'Add a subtask',\n  subtasks: 'Subtasks',\n  subtaskStatus: '( Completed / Pending )',\n  deleteTask: 'Delete task and its subtasks? Can\\'t be undone',\n  // btn: 'Add task',\n  // title: 'MyTodo List',\n  // uncompleted: 'My tasks',\n  allTasksCompleted: () => {\n    const incomplete = [\n      '😁 All tasks completed!',\n      'Now that\\'s what I call a clean list 🥳',\n      'Wow, such empty 👏',\n      'Finitto? Go for a cappuccino ☕️',\n      'All tasks done, time for a break 🏖',\n      'So productive. I\\'m impressed 😎',\n      'Make a Todolist: Done ✅',\n      'I am Finnish 🇫🇮 with all tasks.'\n    ];\n    return incomplete[Math.floor(Math.random() * incomplete.length)];\n  },\n  completed: 'Completed',\n  completedNo: 'No completed tasks',\n  showCompleted: 'Show completed tasks',\n  hideCompleted: 'Hide completed tasks',\n\n  saveTask: 'Save',\n  discardTask: 'Cancel changes',\n\n  notes: 'Notes',\n  notesPh: 'An optional description always helps',\n\n  projects: 'Projects',\n  addProject: 'Add a new project',\n  addProjectPh: 'Enter a name for a new project',\n  deleteProject: 'Delete this project and all the tasks? (cannot be undone)'\n\n};\n","import firebase from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDxmJzv3ccl0_ouKB9oVSzWIsn6uysYMLQ\",\n  authDomain: \"todo-list-react-33431.firebaseapp.com\",\n  databaseURL: \"https://todo-list-react-33431.firebaseio.com\",\n  projectId: \"todo-list-react-33431\",\n  storageBucket: \"todo-list-react-33431.appspot.com\",\n  messagingSenderId: \"153291173882\",\n  appId: \"1:153291173882:web:4eb5673b9a70ce5828fe43\",\n  measurementId: \"G-BCMCPMQHDB\"\n};\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\n// export const auth = firebase.auth;\nexport const db = firebase.database();\n","import { db } from './firebase';\n\nconst user = 'nicoemailcom';\n\nconst taskService = {\n\n  db: db,\n\n  path: '',\n\n  updateTask: async (task) => {\n    console.info('Updating task ', task.name);\n\n    try {\n      return await db.ref(`${ taskService.path }/tasks/${ task.key }`).update(task);\n    } catch (e) {\n      console.error('Error on update: ', e);\n    }\n  },\n\n  addTask: async (task) => {\n    console.info('Adding task ', task.name);\n\n    try {\n      return await db.ref(`${ taskService.path }/tasks`).push(task);\n    } catch (e) {\n      console.error('Error on save task: ', e);\n    }\n  },\n\n  deleteTask: async (task) => {\n    console.info('Deleting task ', task.name);\n\n    try {\n      await db.ref(`${ taskService.path }/tasks/${ task.key }`).remove(() => {\n        console.info(`\"${ task.name }\" was removed!`);\n      });\n    } catch (e) {\n      console.error('Error on delete task: ', e);\n    }\n  },\n\n  getProject: (projectKey, done) => {\n    taskService.path = `lists/${ user }/${ projectKey }`;\n\n    try {\n      return db.ref(taskService.path).on('value', (snapshot) => {\n\n        const projectName = snapshot.child('name').val();\n\n        const project = {\n          key: snapshot.key,\n          name: projectName,\n          tasks: []\n        };\n\n        snapshot.child('tasks').forEach((task) => {\n          project.tasks.push({\n            key: task.key,\n            subtasks: [],\n            ...task.val(),\n          });\n        });\n\n        done(project);\n\n      });\n    } catch (e) {\n      console.error('Error on fetching tasks: ', e);\n    }\n  },\n\n  getProjects: (done) => {\n    try {\n      return db.ref(`lists/${ user }`).on('value', (snapshot) => {\n\n        const projects = [];\n        snapshot.forEach((project) => {\n          const projectData = project.val();\n          const tasks = Object.values(projectData.tasks || '' /* empty object actually... */);\n          const completedTasks = tasks.filter((t) => t.checked).length;\n          const openTasks = tasks.length - completedTasks;\n          projects.push({\n            key: project.key,\n            name: projectData.name,\n            openTasks,\n            completedTasks\n          });\n        });\n\n        done(projects);\n\n        console.info('Lists loaded: ', projects.length);\n      });\n    } catch (e) {\n      console.error('Error on fetching tasks: ', e);\n    }\n  },\n\n  saveListName: async (projectName) => {\n    console.info('Updating list name ', projectName);\n\n    try {\n      return await db.ref(`${ taskService.path }`).update({ name: projectName });\n    } catch (e) {\n      console.error('Error on save name: ', e);\n    }\n  },\n\n  newProject: async (projectName) => {\n    try {\n      return await db.ref(`lists/${ user }`).push({ name: projectName });\n    } catch (e) {\n      console.error('Error on create project: ', e);\n    }\n  },\n\n  deleteProject: async (project) => {\n    try {\n      console.info('Deleting project ', project.name);\n      return await db.ref(`lists/${ user }/${ project.key }`).remove();\n    } catch (e) {\n      console.error('Error on delete project: ', e);\n    }\n  }\n};\n\nexport default taskService;\n","import Modal from './Modal';\nimport React, { useContext, useEffect, useState } from 'react';\nimport createTaskObject from 'functions/createTaskObject';\nimport { text } from 'text';\nimport taskService from 'services/taskService';\nimport { ProjectContext } from 'App';\n\nfunction TaskModal ({ trigger, task, modalOpen, setModalOpen }) {\n\n  const [subtaskName, setSubtaskName] = useState('');\n  const [subtasks, setSubtasks] = useState(task.subtasks || []);\n  const [newSubtasks, setNewSubtasks] = useState([]);\n  const [taskName, setTaskName] = useState(task.name || '');\n  const [taskDesc, setTaskDesc] = useState(task.description || '');\n\n  const projectName = useContext(ProjectContext).name;\n\n  useEffect(() => {\n    setTaskName(task.name || '');\n    setSubtasks(task.subtasks || []);\n    setTaskDesc(task.description || '');\n  }, [task]);\n\n  async function saveTask (task, keepOpen) {\n    if (task.key) {\n      await taskService.updateTask(task);\n    } else {\n      taskService.addTask(createTaskObject(task)).then((reference) => {\n        task.key = reference.key;\n      });\n    }\n    setModalOpen(!!keepOpen);\n  }\n\n  async function submit (e) {\n    e.preventDefault();\n\n    task.name = taskName;\n    task.description = taskDesc;\n    task.subtasks = [...subtasks, ...newSubtasks];\n\n    await saveTask(task, false);\n  }\n\n  function toggleSubtask (subtask) {\n    subtask.checked = !subtask.checked;\n    setSubtasks([...task?.subtasks]);\n  }\n\n  function saveSubtask (e) {\n    e.preventDefault();\n\n    setNewSubtasks([\n      ...newSubtasks,\n      {\n        key: Math.random(),\n        timestamp: new Date(),\n        name: subtaskName,\n        checked: false\n      }\n    ]);\n    e.target[0].value = '';\n  }\n\n  async function onAccept (e) {\n    await submit(e);\n    setModalOpen(false);\n  }\n\n  return (\n    <>\n      <button className={ trigger.className } onClick={ () => setModalOpen(true) }>{ trigger.text }</button>\n      <Modal\n        modalOpen={ modalOpen }\n        onAccept={ onAccept }\n        onCancel={ () => setModalOpen(false) }\n        okButton={ text.saveTask + ' <i class=\"material-icons right\">save</i>' }\n        cancelButton={ text.discardTask + ' <i class=\"material-icons right\">cancel</i>' }\n      >\n        <h6 className=\"subtle mb-15 mt-5\">{ projectName }</h6>\n        <form onSubmit={ submit }>\n          <div>\n            <label>Task Name</label>\n            <input\n              value={ taskName } required minLength={ 3 }\n              placeholder=\"Enter a name for the task\"\n              onChange={ (e) => setTaskName(e.target.value) }\n            />\n          </div>\n          <div>\n            <label>{ text.notes }</label>\n            <textarea\n              value={ taskDesc }\n              className=\"materialize-textarea\"\n              placeholder={ text.notesPh }\n              onChange={ (e) => setTaskDesc(e.target.value) }\n            />\n          </div>\n        </form>\n\n        <ul className=\"list-unstyled flex-column\">\n          {\n            (subtasks || []).map((sub) =>\n              <li key={ sub.key } title={ sub.timestamp } className=\"block\">\n                <label className=\"left\">\n                  <input\n                    type=\"checkbox\" checked={ sub.checked }\n                    id={ sub.key }\n                    className=\"material-cb\"\n                    onChange={ () => toggleSubtask(sub) }\n                  />\n                  <div/>\n                </label>\n                <span className=\"left\">{ sub.name }</span>\n              </li>\n            )\n          }\n          {\n            newSubtasks.map((sub) =>\n              <li key={ sub.key } className=\"block\">\n                <label className=\"left\">\n                  <input type=\"checkbox\" className=\"material-cb\" disabled/>\n                  <div/>\n                </label>\n                <span className=\"left subtle\">{ sub.name }</span>\n              </li>\n            )\n          }\n          <li key=\"new-subtask\">\n            <form onSubmit={ saveSubtask }>\n              <label>{ text.subtasks }</label>\n              <input\n                onChange={ (e) => setSubtaskName(e.target.value) }\n                placeholder={ text.addSubtaskPh }\n                className=\"input-field\"\n              />\n            </form>\n          </li>\n        </ul>\n      </Modal>\n    </>\n  );\n}\n\nexport default TaskModal;\n","import { text } from 'text';\nimport React, { useState } from 'react';\n\nfunction Subtask ({ extraClass, task, saveSubtasks }) {\n\n  const [subtaskName, setSubtaskName] = useState('');\n  const [addSubtaskInput, setAddSubtaskInput] = useState(false);\n\n  function saveSubtask (e) {\n    e.preventDefault();\n    e.target[0].value = '';\n    setAddSubtaskInput(false);\n\n    task.subtasks = [\n      ...(task.subtasks || []),\n      {\n        key: Math.random(),\n        timestamp: new Date(),\n        name: subtaskName,\n        checked: false\n      }\n    ];\n    saveSubtasks(task);\n  }\n\n  function toggleSubtask (subtask) {\n    subtask.checked = !subtask.checked;\n    saveSubtasks(task);\n  }\n\n  return (\n    <ul className={ 'list-unstyled flex-column ' + extraClass }>\n      {\n        (task.subtasks || []).map((sub) =>\n          <li key={ sub.key } title={ sub.timestamp } className=\"block\">\n            <label className=\"left\">\n              <input\n                type=\"checkbox\" checked={ sub.checked }\n                id={ sub.key } className=\"material-cb\"\n                onChange={ () => toggleSubtask(sub) }\n              />\n              <div/>\n            </label>\n            <span className=\"left\">{ sub.name }</span>\n          </li>\n        )\n      }\n      <li key=\"new-subtask\">\n        {\n          addSubtaskInput\n            ?\n            <form onSubmit={ saveSubtask }>\n              <input\n                onChange={ (e) => setSubtaskName(e.target.value) }\n                placeholder={ text.addSubtaskPh }\n                autoFocus={ true }\n                className=\"input-field invisible\"\n              />\n            </form>\n            :\n            <button className=\"btn-flat subtle\" onClick={ () => setAddSubtaskInput(true) }>\n              <i className=\"material-icons left\">add</i>\n              { text.addSubtaskBtn }\n            </button>\n        }\n      </li>\n    </ul>\n  );\n}\n\nexport default Subtask;\n","import React, { useState } from 'react';\nimport './_task.scss';\nimport TaskModal from 'components/Modal/TaskModal';\nimport Subtask from './Subtask';\nimport { text } from 'text';\nimport taskService from 'services/taskService';\n\nfunction Task ({ task }) {\n  const [subtasks, setSubtasks] = useState(task.subtasks || []);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [expandedTask, setExpandedTask] = useState(false);\n\n  const completedSubtasks = subtasks.filter((s) => !!s.checked).length;\n\n  async function toggleCompleted (task) {\n    task.checked = !task.checked;\n    // after changing the state...\n    if (task.checked) {\n      // set all subtasks as checked, since the main task was marked as checked.\n      (task.subtasks || []).forEach((_task) => _task.checked = true);\n      task.expanded = false;\n    }\n    await taskService.updateTask(task);\n  }\n\n  /**\n   * If you want to say the toggle state, just update this function\n   */\n  async function toggleExpanded (isExpanded) {\n    //task.expanded = isExpanded;\n    // await taskService.updateTask(task);\n    setExpandedTask(isExpanded);\n  }\n\n  async function saveSubtasks (task) {\n    setSubtasks(task.subtasks);\n    await taskService.updateTask(task);\n  }\n\n  async function onDelete () {\n    if (window.confirm(text.deleteTask)) {\n      await taskService.deleteTask(task)\n    }\n  }\n\n  return (\n    <li className={ (task.checked ? 'done' : '') + ' parent-hover task' } title={ task.timestamp }>\n      <div className=\"task-content\">\n        <button\n          className={ 'toggle-expand subtle btn-invisible material-icons tiny left ' + (expandedTask && ' expanded') }\n          onClick={ () => toggleExpanded(!expandedTask) }\n        >chevron_right\n        </button>\n        <label className=\"left\">\n          <input\n            type=\"checkbox\"\n            className=\"material-cb\"\n            checked={ task.checked }\n            onChange={ () => toggleCompleted(task) }\n          />\n          <div/>\n        </label>\n        <button\n          className={ 'btn-invisible task-name ' + (task.checked ? '' : '') }\n          onClick={ () => setModalOpen(true) }>\n          { task.name }\n          <span className=\"subtle child-hover ml-5\" title={ text.subtaskStatus }\n          >({ completedSubtasks } / { subtasks.length - completedSubtasks })</span>\n        </button>\n\n        <span className=\"right\">\n          <button\n            className=\"child-hover btn-subtle ml-5 material-icons right\"\n            onClick={ () => onDelete(task) }\n          >delete\n          </button>\n          <TaskModal\n            trigger={ {\n              className: 'child-hover btn-subtle ml-5 material-icons right',\n              text: 'edit'\n            } } task={ { ...task } }\n            modalOpen={ modalOpen }\n            setModalOpen={ setModalOpen }\n          />\n        </span>\n      </div>\n      {\n        expandedTask &&\n        <>\n          {\n            task.description &&\n            <div className=\"ml-50\">\n              <p><span className=\"subtle\">{ text.notes }:</span> { task.description }</p>\n            </div>\n          }\n          <Subtask extraClass={ 'ml-50' } saveSubtasks={ saveSubtasks } subtasks={ subtasks } task={ task }/>\n        </>\n      }\n    </li>\n  );\n}\n\nexport default Task;\n","import React from 'react';\nimport { text } from 'text';\n\nfunction ProjectTitle ({ project, showCompleted, setShowCompleted }) {\n  return (\n    project.editListName\n      ? <form onSubmit={ project.saveListName }>\n        <input\n          className=\"as-title m0 invisible h4\" autoFocus /*onBlur={ project.saveListName }*/\n          value={ project.projectName }\n          onChange={ (e) => project.setProjectName(e.target.value) }\n        />\n      </form>\n      : <div className=\"flex-row\">\n        <h4 className=\"max-content m0\" onClick={ () => project.setEditListName(true) }>{ project.projectName }</h4>\n        {\n          showCompleted\n            ? <button\n              className=\"material-icons ml-5 toggle-completed btn-invisible subtle\"\n              onClick={ () => setShowCompleted(false) }\n              title={ text.hideCompleted }\n            >check_box</button>\n            : <button\n              className=\"material-icons ml-5 toggle-completed btn-invisible subtle\"\n              onClick={ () => setShowCompleted(true) }\n              title={ text.showCompleted }\n            >check_box_outline_blank</button>\n        }\n      </div>\n  );\n}\n\nexport default ProjectTitle;\n","import { useMemo, useState } from 'react';\nimport './_project.scss';\nimport projectRender from 'components/Project/Project-view';\nimport taskService from 'services/taskService';\nimport createTaskObject from 'functions/createTaskObject';\nimport { text } from 'text';\n\nfunction Project ({ project }) {\n\n  const [showCompleted, setShowCompleted] = useState(true);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [projectName, setProjectName] = useState(project.name || text.noListName);\n  const [editListName, setEditListName] = useState(false);\n\n  const open = (project.tasks || []).filter((task) => !task.checked);\n  const completed = (project.tasks || []).filter((task) => !!task.checked);\n\n  // const inputElement = useRef(null);\n\n  const allCompleted = useMemo(() => {\n    return text.allTasksCompleted()\n  }, [ open.length ]);\n\n  let taskName = '';\n\n  async function submit (e) {\n    e.preventDefault();\n    e.target[0].value = '';\n    // inputElement.current && (inputElement.current.target.value = '');\n\n    await taskService.addTask(createTaskObject({ name: taskName }));\n  }\n\n  function changed (e) {\n    taskName = e.target.value;\n  }\n\n  async function saveListName (e) {\n    e.preventDefault();\n\n    await taskService.saveListName(projectName);\n    setEditListName(false);\n  }\n\n  return projectRender({\n    // inputElement,\n    open,\n    completed,\n    submit,\n    changed,\n    showCompleted,\n    setShowCompleted,\n    modalOpen,\n    allCompleted,\n    setModalOpen,\n    project: {\n      projectName,\n      saveListName,\n      editListName,\n      setEditListName,\n      setProjectName\n    }\n  });\n}\n\nexport default Project;\n","import React from 'react';\nimport Task from 'components/Project/Task/Task';\nimport { text } from 'text';\nimport TaskModal from 'components/Modal/TaskModal';\nimport ProjectTitle from 'components/ProjectTitle/ProjectTitle';\n\n\nexport default function projectRender ({\n  /*inputElement,*/ submit, changed, completed, open, showCompleted, setShowCompleted, modalOpen, setModalOpen, allCompleted, project\n}) {\n\n  return (\n    <>\n      <ProjectTitle project={ project } showCompleted={ showCompleted } setShowCompleted={ setShowCompleted }/>\n\n      <ul className=\"list-unstyled\">\n        { open.length ?\n          open.map((task) =>\n            <Task\n              key={ task.key }\n              task={ task }\n            />)\n          : (completed.length ? <li><h5 className=\"subtle max-content\">{ allCompleted }</h5></li> : '')\n        }\n        { showCompleted && completed.map((task) =>\n          <Task\n            key={ task.key }\n            task={ task }\n          />) }\n      </ul>\n\n      <form className=\"form-inline\" onSubmit={ submit }>\n        <div className=\"form-group\">\n          <div className=\"input-group mb-2\">\n            <input\n              onChange={ changed } className=\"invisible\"\n              placeholder={ text.addPh } required\n              autoComplete=\"off\" /*ref={ inputElement }*/\n            />\n          </div>\n        </div>\n      </form>\n\n      <TaskModal\n        trigger={ {\n          className: 'btn-floating btn-large fixed-action-btn subtle-bg',\n          text: <i className=\"material-icons\">add</i>\n        } }\n        task={ {} }\n        modalOpen={ modalOpen }\n        setModalOpen={ setModalOpen }\n      />\n    </>\n  );\n}\n","import './_app-loader.scss';\nimport { text } from 'text';\nimport React from 'react';\n\nfunction Loader () {\n  return (\n    <span className=\"app-loader\">\n      <span>{ text.loading }</span>\n    </span>\n  )\n}\n\nexport default Loader;\n","import React, { useEffect, useState } from 'react';\nimport taskService from 'services/taskService';\nimport { text } from 'text';\nimport './_projects.scss';\n\nfunction validProjectKey (key, projects) {\n  if (!key || !projects.filter((p) => p.key === key).length) {\n    return projects[0].key;\n  }\n  return key;\n}\n\nfunction Projects ({ projectKey, setProjectKey, setShowLoader }) {\n\n  const [projects, setProjects] = useState([]);\n  const [showAddProject, setShowAddProject] = useState(false);\n\n  const [newProjectName, setNewProjectName] = useState('');\n\n  useEffect(() => {\n    taskService.getProjects((_projects) => {\n      setProjectKey(validProjectKey(projectKey, _projects)); // set the first project as selected...\n      setProjects(_projects);\n    });\n  }, [/* empty dependency means this function will NEVER be called again === componentDidMount */]);\n\n  function addNewProject (e) {\n    e.preventDefault();\n\n    taskService.newProject(newProjectName).then((snap) => {\n      setShowAddProject(false);\n      setNewProjectName('');\n    });\n  }\n\n  async function deleteProject (project) {\n    if (window.confirm(text.deleteProject)) {\n      setShowLoader(true);\n      setProjectKey('');\n      await taskService.deleteProject(project);\n    }\n  }\n\n  function setProject (project) {\n    if (project.key === projectKey) {\n      return; // can't change to itself... it also causes a re-render problem in the `useEffect`\n    }\n    // setShowLoader(true);\n    setProjectKey(project.key);\n  }\n\n  return (\n    <>\n      <h4>{ text.projects }</h4>\n      <ul className=\"projects-list flex-column\">\n        {\n          projects.map((proj) =>\n            <li key={ proj.key } className={ (projectKey === proj.key ? 'selected' : '') + ' mb-5 parent-hover ' }>\n              <button className=\"btn-invisible left\" onClick={ () => setProject(proj) }>\n                { proj.name } ( { proj.openTasks } <span className=\"subtle\">/ { proj.completedTasks }</span> )\n              </button>\n              <button className=\"btn-invisible child-hover left\" onClick={ () => deleteProject(proj) }>\n                <i className=\"tiny material-icons subtle\">delete</i>\n              </button>\n            </li>\n          )\n        }\n        <li>\n          {\n            showAddProject\n              ? <form onSubmit={ addNewProject }>\n                <input\n                  className=\"invisible subtle\" onChange={ (e) => setNewProjectName(e.target.value) }\n                  required minLength=\"3\"\n                  value={ newProjectName } autoFocus placeholder={ text.addProjectPh }\n                  onBlur={ () => setShowAddProject(false) }\n                />\n              </form>\n              : <button className=\"btn-invisible btn-flat subtle\" onClick={ () => setShowAddProject(true) }>\n                <i className=\"material-icons left tiny\">add</i>{ text.addProject }\n              </button>\n          }\n        </li>\n      </ul>\n    </>\n  );\n}\n\nexport default Projects;\n","import React, { useEffect, useState } from 'react';\nimport Project from 'components/Project/Project';\nimport taskService from './services/taskService';\nimport Loader from 'components/Loader/Loader';\nimport Projects from './components/Projects/Projects';\n\nexport const ProjectContext = React.createContext({});\n\nfunction App () {\n\n  const [projectKey, setProjectKey] = useState(window.location.hash.substring(1));\n\n  const [project, setProject] = useState({});\n  const [showLoader, setShowLoader] = useState(true);\n\n\n  useEffect(() => {\n    window.location.hash = projectKey;\n\n    taskService.getProject(projectKey, (project) => {\n      setProject(project);\n      setShowLoader(false);\n    });\n\n    return () => {\n      taskService.db.ref(taskService.path).off('value');\n    };\n  }, [projectKey]);\n\n  return (\n    <>\n      { showLoader && <Loader/> }\n      <div className=\"row m0\">\n        <div className=\"col s3 projects-list-box\">\n          <Projects\n            projectKey={ projectKey }\n            setProjectKey={ setProjectKey }\n            setShowLoader={ setShowLoader }\n          />\n        </div>\n        <div className=\"col s9 tasks-list-box flex-column\">\n          <ProjectContext.Provider\n            value={ {\n              key: project.key,\n              name: project.name\n            } }\n          >\n            <Project project={ project }/>\n          </ProjectContext.Provider>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sass/index.scss';\n// import 'materialize-css/dist/js/materialize.min.js';\nimport App from 'App';\n\n// ======================================== //\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}